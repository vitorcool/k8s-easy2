#!/bin/bash
#
# k8sEasy2S
#
# Command: findSecret <-n namespace> <-d> <-h> <SECRET_PREFIX>

function show_help() {
    echo "Usage: $(basename $0) SECRET_PREFIX [-n namespace] [-d] [-h]"
    echo ""
    echo "    -n: used namespace"
	echo "    -o: output [default:describe, table, names, tokens]"
    echo "    -d: dbg info"
    echo "    -h: help"
}

function debug_o() {
	if $CMD_DEBUG; then
		echo $1 $2 $3 $4 $5 $6 $7 $8 $9
	fi
}

SECRET_PREFIX=$1
RESOURCE_TYPE=secret
RESOURCE_NAMESPACE=default
CMD_DEBUG=false
RESULT_OUTPUT="describe"

# set getopts start looking to opts starting on 2nd argument. first on is reserved to define SECRET_PREFIX
OPTIND=2
while getopts ":n:d :h :o:" arg; do
  case $arg in
    n)
	  RESOURCE_NAMESPACE=$OPTARG
	  ;;
    d)
	  CMD_DEBUG=true
	  ;;
	o)
	  RESULT_OUTPUT=$OPTARG
	  ;;
	h)
	  show_help
	  echo "-h $OPTARG invoked help"
	  exit 0
	  ;;

	:)
	  show_help
      echo "$0: Must supply an argument to -$OPTARG." >&2
      exit 1
      ;;
    ?)
	  show_help
      echo "Invalid option: -${OPTARG}."
      exit 2
      ;;
  esac
done


CMD_GETSECRETS_NAMES="kubectl get secrets -n ${RESOURCE_NAMESPACE} --no-headers=true | awk '/${SECRET_PREFIX}/{print \$1}' | xargs"


debug_o "SECRET_PREFIX=$SECRET_PREFIX"
debug_o "RESOURCE_TYPE=$RESOURCE_TYPE"
debug_o "RESOURCE_NAMESPACE=$RESOURCE_NAMESPACE"
debug_o "CMD_DEBUG=$CMD_DEBUG"
debug_o "RESULT_OUTPUT=$RESULT_OUTPUT"

RESULT=""

debug_o "$CMD_GETSECRETS_NAMES"
SECRETS_NAMES=$(eval $CMD_GETSECRETS_NAMES)
debug_o "Secrets found: $SECRETS_NAMES"

if [ $SECRETS_NAMES == "" ]; then
	exit
fi
if [ $RESULT_OUTPUT == "names" ]; then
	debug_o "$SECRETS_NAMES"
	eval $CMD_GETSECRETS_NAMES
elif [ $RESULT_OUTPUT == "list" ]; then
	CMD_GETSECRETS_TABLE="kubectl get secrets -n ${RESOURCE_NAMESPACE} $SECRETS_NAMES"
	debug_o "$CMD_GETSECRETS_TABLE"
	eval $CMD_GETSECRETS_TABLE
else
	CMD_GETSECRETS_DESCRIBE="kubectl -n ${RESOURCE_NAMESPACE} describe secret $SECRETS_NAMES"
	if [ $RESULT_OUTPUT == "describe" ]; then
		debug_o "$CMD_GETSECRETS_DESCRIBE"
		eval $CMD_GETSECRETS_DESCRIBE
	fi
	if [ $RESULT_OUTPUT == "token" ]; then
		CMD_GETSECRETS_TOKEN="$CMD_GETSECRETS_DESCRIBE | awk '/token:/{print \$2}'"
		debug_o "$CMD_GETSECRETS_TOKEN"
		eval $CMD_GETSECRETS_TOKEN
	fi
fi
